
Project2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  000005a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000534  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000065  00800200  00800200  000005a8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005a8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  00000618  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010f9  00000000  00000000  000006b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e33  00000000  00000000  000017a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000057f  00000000  00000000  000025dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001bc  00000000  00000000  00002b5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006c0  00000000  00000000  00002d18  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000045b  00000000  00000000  000033d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00003833  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	81 c0       	rjmp	.+258    	; 0x108 <__bad_interrupt>
   6:	00 00       	nop
   8:	7f c0       	rjmp	.+254    	; 0x108 <__bad_interrupt>
   a:	00 00       	nop
   c:	7d c0       	rjmp	.+250    	; 0x108 <__bad_interrupt>
   e:	00 00       	nop
  10:	7b c0       	rjmp	.+246    	; 0x108 <__bad_interrupt>
  12:	00 00       	nop
  14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
  16:	00 00       	nop
  18:	77 c0       	rjmp	.+238    	; 0x108 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	75 c0       	rjmp	.+234    	; 0x108 <__bad_interrupt>
  1e:	00 00       	nop
  20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
  22:	00 00       	nop
  24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
  26:	00 00       	nop
  28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
  32:	00 00       	nop
  34:	69 c0       	rjmp	.+210    	; 0x108 <__bad_interrupt>
  36:	00 00       	nop
  38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
  3e:	00 00       	nop
  40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
  42:	00 00       	nop
  44:	61 c0       	rjmp	.+194    	; 0x108 <__bad_interrupt>
  46:	00 00       	nop
  48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
  52:	00 00       	nop
  54:	95 c1       	rjmp	.+810    	; 0x380 <__vector_21>
  56:	00 00       	nop
  58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
  5e:	00 00       	nop
  60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
  62:	00 00       	nop
  64:	51 c0       	rjmp	.+162    	; 0x108 <__bad_interrupt>
  66:	00 00       	nop
  68:	4f c0       	rjmp	.+158    	; 0x108 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
  72:	00 00       	nop
  74:	49 c0       	rjmp	.+146    	; 0x108 <__bad_interrupt>
  76:	00 00       	nop
  78:	47 c0       	rjmp	.+142    	; 0x108 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	45 c0       	rjmp	.+138    	; 0x108 <__bad_interrupt>
  7e:	00 00       	nop
  80:	43 c0       	rjmp	.+134    	; 0x108 <__bad_interrupt>
  82:	00 00       	nop
  84:	41 c0       	rjmp	.+130    	; 0x108 <__bad_interrupt>
  86:	00 00       	nop
  88:	3f c0       	rjmp	.+126    	; 0x108 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3d c0       	rjmp	.+122    	; 0x108 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3b c0       	rjmp	.+118    	; 0x108 <__bad_interrupt>
  92:	00 00       	nop
  94:	39 c0       	rjmp	.+114    	; 0x108 <__bad_interrupt>
  96:	00 00       	nop
  98:	37 c0       	rjmp	.+110    	; 0x108 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	35 c0       	rjmp	.+106    	; 0x108 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	33 c0       	rjmp	.+102    	; 0x108 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	31 c0       	rjmp	.+98     	; 0x108 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2f c0       	rjmp	.+94     	; 0x108 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2d c0       	rjmp	.+90     	; 0x108 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2b c0       	rjmp	.+86     	; 0x108 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	29 c0       	rjmp	.+82     	; 0x108 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	27 c0       	rjmp	.+78     	; 0x108 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	25 c0       	rjmp	.+74     	; 0x108 <__bad_interrupt>
  be:	00 00       	nop
  c0:	23 c0       	rjmp	.+70     	; 0x108 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	21 c0       	rjmp	.+66     	; 0x108 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1f c0       	rjmp	.+62     	; 0x108 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	1d c0       	rjmp	.+58     	; 0x108 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	1b c0       	rjmp	.+54     	; 0x108 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	19 c0       	rjmp	.+50     	; 0x108 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	17 c0       	rjmp	.+46     	; 0x108 <__bad_interrupt>
  da:	00 00       	nop
  dc:	15 c0       	rjmp	.+42     	; 0x108 <__bad_interrupt>
  de:	00 00       	nop
  e0:	13 c0       	rjmp	.+38     	; 0x108 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	a5 36       	cpi	r26, 0x65	; 101
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	59 d0       	rcall	.+178    	; 0x1b8 <main>
 106:	14 c2       	rjmp	.+1064   	; 0x530 <_exit>

00000108 <__bad_interrupt>:
 108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <ping>:
 10a:	5b 9a       	sbi	0x0b, 3	; 11
 10c:	5c 9a       	sbi	0x0b, 4	; 11
 10e:	08 95       	ret

00000110 <pong>:
 110:	5b 98       	cbi	0x0b, 3	; 11
 112:	5c 98       	cbi	0x0b, 4	; 11
 114:	08 95       	ret

00000116 <get_system_timer>:
 116:	2f b7       	in	r18, 0x3f	; 63
 118:	f8 94       	cli
 11a:	60 91 00 02 	lds	r22, 0x0200	; 0x800200 <_edata>
 11e:	70 91 01 02 	lds	r23, 0x0201	; 0x800201 <_edata+0x1>
 122:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <_edata+0x2>
 126:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <_edata+0x3>
 12a:	2f bf       	out	0x3f, r18	; 63
 12c:	08 95       	ret

0000012e <delay>:
 12e:	8f 92       	push	r8
 130:	9f 92       	push	r9
 132:	af 92       	push	r10
 134:	bf 92       	push	r11
 136:	cf 92       	push	r12
 138:	df 92       	push	r13
 13a:	ef 92       	push	r14
 13c:	ff 92       	push	r15
 13e:	4b 01       	movw	r8, r22
 140:	5c 01       	movw	r10, r24
 142:	e9 df       	rcall	.-46     	; 0x116 <get_system_timer>
 144:	6b 01       	movw	r12, r22
 146:	7c 01       	movw	r14, r24
 148:	e6 df       	rcall	.-52     	; 0x116 <get_system_timer>
 14a:	dc 01       	movw	r26, r24
 14c:	cb 01       	movw	r24, r22
 14e:	8c 19       	sub	r24, r12
 150:	9d 09       	sbc	r25, r13
 152:	ae 09       	sbc	r26, r14
 154:	bf 09       	sbc	r27, r15
 156:	88 15       	cp	r24, r8
 158:	99 05       	cpc	r25, r9
 15a:	aa 05       	cpc	r26, r10
 15c:	bb 05       	cpc	r27, r11
 15e:	20 f4       	brcc	.+8      	; 0x168 <delay+0x3a>
 160:	83 b7       	in	r24, 0x33	; 51
 162:	81 60       	ori	r24, 0x01	; 1
 164:	83 bf       	out	0x33, r24	; 51
 166:	f0 cf       	rjmp	.-32     	; 0x148 <delay+0x1a>
 168:	ff 90       	pop	r15
 16a:	ef 90       	pop	r14
 16c:	df 90       	pop	r13
 16e:	cf 90       	pop	r12
 170:	bf 90       	pop	r11
 172:	af 90       	pop	r10
 174:	9f 90       	pop	r9
 176:	8f 90       	pop	r8
 178:	08 95       	ret

0000017a <idle>:
 17a:	5f 9a       	sbi	0x0b, 7	; 11
 17c:	d8 df       	rcall	.-80     	; 0x12e <delay>
 17e:	5f 98       	cbi	0x0b, 7	; 11
 180:	08 95       	ret

00000182 <setup>:
 182:	8a b1       	in	r24, 0x0a	; 10
 184:	88 69       	ori	r24, 0x98	; 152
 186:	8a b9       	out	0x0a, r24	; 10
 188:	1a d0       	rcall	.+52     	; 0x1be <Scheduler_Init>
 18a:	45 e8       	ldi	r20, 0x85	; 133
 18c:	50 e0       	ldi	r21, 0x00	; 0
 18e:	64 ef       	ldi	r22, 0xF4	; 244
 190:	71 e0       	ldi	r23, 0x01	; 1
 192:	80 e0       	ldi	r24, 0x00	; 0
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	24 d0       	rcall	.+72     	; 0x1e0 <Scheduler_StartTask>
 198:	48 e8       	ldi	r20, 0x88	; 136
 19a:	50 e0       	ldi	r21, 0x00	; 0
 19c:	6c e2       	ldi	r22, 0x2C	; 44
 19e:	71 e0       	ldi	r23, 0x01	; 1
 1a0:	80 e0       	ldi	r24, 0x00	; 0
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	1d c0       	rjmp	.+58     	; 0x1e0 <Scheduler_StartTask>
 1a6:	08 95       	ret

000001a8 <loop>:
 1a8:	4a d0       	rcall	.+148    	; 0x23e <Scheduler_Dispatch>
 1aa:	61 15       	cp	r22, r1
 1ac:	71 05       	cpc	r23, r1
 1ae:	81 05       	cpc	r24, r1
 1b0:	91 05       	cpc	r25, r1
 1b2:	09 f0       	breq	.+2      	; 0x1b6 <loop+0xe>
 1b4:	e2 cf       	rjmp	.-60     	; 0x17a <idle>
 1b6:	08 95       	ret

000001b8 <main>:
 1b8:	e4 df       	rcall	.-56     	; 0x182 <setup>
 1ba:	f6 df       	rcall	.-20     	; 0x1a8 <loop>
 1bc:	fe cf       	rjmp	.-4      	; 0x1ba <main+0x2>

000001be <Scheduler_Init>:
 1be:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <ms>
 
uint32_t last_runtime;
 
void Scheduler_Init()
{
  last_runtime = ms;
 1c2:	90 91 5e 02 	lds	r25, 0x025E	; 0x80025e <ms+0x1>
 1c6:	a0 91 5f 02 	lds	r26, 0x025F	; 0x80025f <ms+0x2>
 1ca:	b0 91 60 02 	lds	r27, 0x0260	; 0x800260 <ms+0x3>
 1ce:	80 93 61 02 	sts	0x0261, r24	; 0x800261 <last_runtime>
 1d2:	90 93 62 02 	sts	0x0262, r25	; 0x800262 <last_runtime+0x1>
 1d6:	a0 93 63 02 	sts	0x0263, r26	; 0x800263 <last_runtime+0x2>
 1da:	b0 93 64 02 	sts	0x0264, r27	; 0x800264 <last_runtime+0x3>
 1de:	08 95       	ret

000001e0 <Scheduler_StartTask>:
}
 
void Scheduler_StartTask(int16_t delay, int16_t period, task_cb task)
{
 1e0:	cf 92       	push	r12
 1e2:	df 92       	push	r13
 1e4:	ef 92       	push	r14
 1e6:	ff 92       	push	r15
 1e8:	0f 93       	push	r16
 1ea:	1f 93       	push	r17
 1ec:	6c 01       	movw	r12, r24
  static uint8_t id = 0;
  if (id < MAXTASKS)
 1ee:	90 91 04 02 	lds	r25, 0x0204	; 0x800204 <id.1721>
 1f2:	98 30       	cpi	r25, 0x08	; 8
 1f4:	e8 f4       	brcc	.+58     	; 0x230 <Scheduler_StartTask+0x50>
  {
    tasks[id].remaining_time = delay;
 1f6:	8b e0       	ldi	r24, 0x0B	; 11
 1f8:	98 9f       	mul	r25, r24
 1fa:	f0 01       	movw	r30, r0
 1fc:	11 24       	eor	r1, r1
 1fe:	eb 5f       	subi	r30, 0xFB	; 251
 200:	fd 4f       	sbci	r31, 0xFD	; 253
 202:	0d 2c       	mov	r0, r13
 204:	00 0c       	add	r0, r0
 206:	ee 08       	sbc	r14, r14
 208:	ff 08       	sbc	r15, r15
 20a:	c4 82       	std	Z+4, r12	; 0x04
 20c:	d5 82       	std	Z+5, r13	; 0x05
 20e:	e6 82       	std	Z+6, r14	; 0x06
 210:	f7 82       	std	Z+7, r15	; 0x07
    tasks[id].period = period;
 212:	8b 01       	movw	r16, r22
 214:	77 0f       	add	r23, r23
 216:	22 0b       	sbc	r18, r18
 218:	33 0b       	sbc	r19, r19
 21a:	00 83       	st	Z, r16
 21c:	11 83       	std	Z+1, r17	; 0x01
 21e:	22 83       	std	Z+2, r18	; 0x02
 220:	33 83       	std	Z+3, r19	; 0x03
    tasks[id].is_running = 1;
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	80 87       	std	Z+8, r24	; 0x08
    tasks[id].callback = task;
 226:	52 87       	std	Z+10, r21	; 0x0a
 228:	41 87       	std	Z+9, r20	; 0x09
    id++;
 22a:	9f 5f       	subi	r25, 0xFF	; 255
 22c:	90 93 04 02 	sts	0x0204, r25	; 0x800204 <id.1721>
  }
}
 230:	1f 91       	pop	r17
 232:	0f 91       	pop	r16
 234:	ff 90       	pop	r15
 236:	ef 90       	pop	r14
 238:	df 90       	pop	r13
 23a:	cf 90       	pop	r12
 23c:	08 95       	ret

0000023e <Scheduler_Dispatch>:
 
uint32_t Scheduler_Dispatch()
{
 23e:	2f 92       	push	r2
 240:	3f 92       	push	r3
 242:	4f 92       	push	r4
 244:	5f 92       	push	r5
 246:	6f 92       	push	r6
 248:	7f 92       	push	r7
 24a:	8f 92       	push	r8
 24c:	9f 92       	push	r9
 24e:	af 92       	push	r10
 250:	bf 92       	push	r11
 252:	cf 92       	push	r12
 254:	df 92       	push	r13
 256:	ef 92       	push	r14
 258:	ff 92       	push	r15
 25a:	0f 93       	push	r16
 25c:	1f 93       	push	r17
 25e:	cf 93       	push	r28
 260:	df 93       	push	r29
  uint8_t i;
 
  uint32_t now = ms;
 262:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <ms>
 266:	90 91 5e 02 	lds	r25, 0x025E	; 0x80025e <ms+0x1>
 26a:	a0 91 5f 02 	lds	r26, 0x025F	; 0x80025f <ms+0x2>
 26e:	b0 91 60 02 	lds	r27, 0x0260	; 0x800260 <ms+0x3>
  uint32_t elapsed = now - last_runtime;
 272:	40 91 61 02 	lds	r20, 0x0261	; 0x800261 <last_runtime>
 276:	50 91 62 02 	lds	r21, 0x0262	; 0x800262 <last_runtime+0x1>
 27a:	60 91 63 02 	lds	r22, 0x0263	; 0x800263 <last_runtime+0x2>
 27e:	70 91 64 02 	lds	r23, 0x0264	; 0x800264 <last_runtime+0x3>
 282:	2c 01       	movw	r4, r24
 284:	3d 01       	movw	r6, r26
 286:	44 1a       	sub	r4, r20
 288:	55 0a       	sbc	r5, r21
 28a:	66 0a       	sbc	r6, r22
 28c:	77 0a       	sbc	r7, r23
  last_runtime = now;
 28e:	80 93 61 02 	sts	0x0261, r24	; 0x800261 <last_runtime>
 292:	90 93 62 02 	sts	0x0262, r25	; 0x800262 <last_runtime+0x1>
 296:	a0 93 63 02 	sts	0x0263, r26	; 0x800263 <last_runtime+0x2>
 29a:	b0 93 64 02 	sts	0x0264, r27	; 0x800264 <last_runtime+0x3>
 29e:	c5 e0       	ldi	r28, 0x05	; 5
 2a0:	d2 e0       	ldi	r29, 0x02	; 2
 2a2:	0d e5       	ldi	r16, 0x5D	; 93
 2a4:	12 e0       	ldi	r17, 0x02	; 2
  task_cb t = NULL;
  uint32_t idle_time = 0xFFFFFFFF;
 2a6:	88 24       	eor	r8, r8
 2a8:	8a 94       	dec	r8
 2aa:	99 24       	eor	r9, r9
 2ac:	9a 94       	dec	r9
 2ae:	aa 24       	eor	r10, r10
 2b0:	aa 94       	dec	r10
 2b2:	bb 24       	eor	r11, r11
 2b4:	ba 94       	dec	r11
  uint8_t i;
 
  uint32_t now = ms;
  uint32_t elapsed = now - last_runtime;
  last_runtime = now;
  task_cb t = NULL;
 2b6:	21 2c       	mov	r2, r1
 2b8:	31 2c       	mov	r3, r1
  uint32_t idle_time = 0xFFFFFFFF;
 
  // update each task's remaining time, and identify the first ready task (if there is one).
  for (i = 0; i < MAXTASKS; i++)
  {
    if (tasks[i].is_running)
 2ba:	88 85       	ldd	r24, Y+8	; 0x08
 2bc:	88 23       	and	r24, r24
 2be:	09 f4       	brne	.+2      	; 0x2c2 <Scheduler_Dispatch+0x84>
 2c0:	3e c0       	rjmp	.+124    	; 0x33e <Scheduler_Dispatch+0x100>
    {
      // update the task's remaining time
      tasks[i].remaining_time -= elapsed;
 2c2:	cc 80       	ldd	r12, Y+4	; 0x04
 2c4:	dd 80       	ldd	r13, Y+5	; 0x05
 2c6:	ee 80       	ldd	r14, Y+6	; 0x06
 2c8:	ff 80       	ldd	r15, Y+7	; 0x07
 2ca:	c4 18       	sub	r12, r4
 2cc:	d5 08       	sbc	r13, r5
 2ce:	e6 08       	sbc	r14, r6
 2d0:	f7 08       	sbc	r15, r7
 2d2:	cc 82       	std	Y+4, r12	; 0x04
 2d4:	dd 82       	std	Y+5, r13	; 0x05
 2d6:	ee 82       	std	Y+6, r14	; 0x06
 2d8:	ff 82       	std	Y+7, r15	; 0x07
      if (tasks[i].remaining_time <= 0)
 2da:	1c 14       	cp	r1, r12
 2dc:	1d 04       	cpc	r1, r13
 2de:	1e 04       	cpc	r1, r14
 2e0:	1f 04       	cpc	r1, r15
 2e2:	b4 f0       	brlt	.+44     	; 0x310 <Scheduler_Dispatch+0xd2>
      {
        if (t == NULL)
 2e4:	21 14       	cp	r2, r1
 2e6:	31 04       	cpc	r3, r1
 2e8:	31 f5       	brne	.+76     	; 0x336 <Scheduler_Dispatch+0xf8>
        {
          // if this task is ready to run, and we haven't already selected a task to run,
          // select this one.
          t = tasks[i].callback;
 2ea:	29 84       	ldd	r2, Y+9	; 0x09
 2ec:	3a 84       	ldd	r3, Y+10	; 0x0a
          tasks[i].remaining_time += tasks[i].period;
 2ee:	88 81       	ld	r24, Y
 2f0:	99 81       	ldd	r25, Y+1	; 0x01
 2f2:	aa 81       	ldd	r26, Y+2	; 0x02
 2f4:	bb 81       	ldd	r27, Y+3	; 0x03
 2f6:	c8 0e       	add	r12, r24
 2f8:	d9 1e       	adc	r13, r25
 2fa:	ea 1e       	adc	r14, r26
 2fc:	fb 1e       	adc	r15, r27
 2fe:	cc 82       	std	Y+4, r12	; 0x04
 300:	dd 82       	std	Y+5, r13	; 0x05
 302:	ee 82       	std	Y+6, r14	; 0x06
 304:	ff 82       	std	Y+7, r15	; 0x07
        }
        idle_time = 0;
 306:	81 2c       	mov	r8, r1
 308:	91 2c       	mov	r9, r1
 30a:	a1 2c       	mov	r10, r1
 30c:	b1 2c       	mov	r11, r1
 30e:	17 c0       	rjmp	.+46     	; 0x33e <Scheduler_Dispatch+0x100>
      }
      else
      {
        idle_time = fmin((uint32_t)tasks[i].remaining_time, idle_time);
 310:	68 2d       	mov	r22, r8
 312:	79 2d       	mov	r23, r9
 314:	8a 2d       	mov	r24, r10
 316:	9b 2d       	mov	r25, r11
 318:	86 d0       	rcall	.+268    	; 0x426 <__floatunsisf>
 31a:	4b 01       	movw	r8, r22
 31c:	5c 01       	movw	r10, r24
 31e:	c7 01       	movw	r24, r14
 320:	b6 01       	movw	r22, r12
 322:	81 d0       	rcall	.+258    	; 0x426 <__floatunsisf>
 324:	a5 01       	movw	r20, r10
 326:	94 01       	movw	r18, r8
 328:	bb d0       	rcall	.+374    	; 0x4a0 <fmin>
 32a:	51 d0       	rcall	.+162    	; 0x3ce <__fixunssfsi>
 32c:	86 2e       	mov	r8, r22
 32e:	97 2e       	mov	r9, r23
 330:	a8 2e       	mov	r10, r24
 332:	b9 2e       	mov	r11, r25
 334:	04 c0       	rjmp	.+8      	; 0x33e <Scheduler_Dispatch+0x100>
          // if this task is ready to run, and we haven't already selected a task to run,
          // select this one.
          t = tasks[i].callback;
          tasks[i].remaining_time += tasks[i].period;
        }
        idle_time = 0;
 336:	81 2c       	mov	r8, r1
 338:	91 2c       	mov	r9, r1
 33a:	a1 2c       	mov	r10, r1
 33c:	b1 2c       	mov	r11, r1
 33e:	2b 96       	adiw	r28, 0x0b	; 11
  last_runtime = now;
  task_cb t = NULL;
  uint32_t idle_time = 0xFFFFFFFF;
 
  // update each task's remaining time, and identify the first ready task (if there is one).
  for (i = 0; i < MAXTASKS; i++)
 340:	c0 17       	cp	r28, r16
 342:	d1 07       	cpc	r29, r17
 344:	09 f0       	breq	.+2      	; 0x348 <Scheduler_Dispatch+0x10a>
 346:	b9 cf       	rjmp	.-142    	; 0x2ba <Scheduler_Dispatch+0x7c>
      {
        idle_time = fmin((uint32_t)tasks[i].remaining_time, idle_time);
      }
    }
  }
  if (t != NULL)
 348:	21 14       	cp	r2, r1
 34a:	31 04       	cpc	r3, r1
 34c:	11 f0       	breq	.+4      	; 0x352 <Scheduler_Dispatch+0x114>
  {
    // If a task was selected to run, call its function.
    t();
 34e:	f1 01       	movw	r30, r2
 350:	19 95       	eicall
  }
  return idle_time;
}
 352:	68 2d       	mov	r22, r8
 354:	79 2d       	mov	r23, r9
 356:	8a 2d       	mov	r24, r10
 358:	9b 2d       	mov	r25, r11
 35a:	df 91       	pop	r29
 35c:	cf 91       	pop	r28
 35e:	1f 91       	pop	r17
 360:	0f 91       	pop	r16
 362:	ff 90       	pop	r15
 364:	ef 90       	pop	r14
 366:	df 90       	pop	r13
 368:	cf 90       	pop	r12
 36a:	bf 90       	pop	r11
 36c:	af 90       	pop	r10
 36e:	9f 90       	pop	r9
 370:	8f 90       	pop	r8
 372:	7f 90       	pop	r7
 374:	6f 90       	pop	r6
 376:	5f 90       	pop	r5
 378:	4f 90       	pop	r4
 37a:	3f 90       	pop	r3
 37c:	2f 90       	pop	r2
 37e:	08 95       	ret

00000380 <__vector_21>:

ISR(TIMER0_COMPA_vect)
{
 380:	1f 92       	push	r1
 382:	0f 92       	push	r0
 384:	0f b6       	in	r0, 0x3f	; 63
 386:	0f 92       	push	r0
 388:	11 24       	eor	r1, r1
 38a:	8f 93       	push	r24
 38c:	9f 93       	push	r25
 38e:	af 93       	push	r26
 390:	bf 93       	push	r27
	TCNT0 = 0xF0;
 392:	80 ef       	ldi	r24, 0xF0	; 240
 394:	86 bd       	out	0x26, r24	; 38

	ms++;
 396:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <ms>
 39a:	90 91 5e 02 	lds	r25, 0x025E	; 0x80025e <ms+0x1>
 39e:	a0 91 5f 02 	lds	r26, 0x025F	; 0x80025f <ms+0x2>
 3a2:	b0 91 60 02 	lds	r27, 0x0260	; 0x800260 <ms+0x3>
 3a6:	01 96       	adiw	r24, 0x01	; 1
 3a8:	a1 1d       	adc	r26, r1
 3aa:	b1 1d       	adc	r27, r1
 3ac:	80 93 5d 02 	sts	0x025D, r24	; 0x80025d <ms>
 3b0:	90 93 5e 02 	sts	0x025E, r25	; 0x80025e <ms+0x1>
 3b4:	a0 93 5f 02 	sts	0x025F, r26	; 0x80025f <ms+0x2>
 3b8:	b0 93 60 02 	sts	0x0260, r27	; 0x800260 <ms+0x3>
}
 3bc:	bf 91       	pop	r27
 3be:	af 91       	pop	r26
 3c0:	9f 91       	pop	r25
 3c2:	8f 91       	pop	r24
 3c4:	0f 90       	pop	r0
 3c6:	0f be       	out	0x3f, r0	; 63
 3c8:	0f 90       	pop	r0
 3ca:	1f 90       	pop	r1
 3cc:	18 95       	reti

000003ce <__fixunssfsi>:
 3ce:	8f d0       	rcall	.+286    	; 0x4ee <__fp_splitA>
 3d0:	88 f0       	brcs	.+34     	; 0x3f4 <__fixunssfsi+0x26>
 3d2:	9f 57       	subi	r25, 0x7F	; 127
 3d4:	90 f0       	brcs	.+36     	; 0x3fa <__fixunssfsi+0x2c>
 3d6:	b9 2f       	mov	r27, r25
 3d8:	99 27       	eor	r25, r25
 3da:	b7 51       	subi	r27, 0x17	; 23
 3dc:	a0 f0       	brcs	.+40     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 3de:	d1 f0       	breq	.+52     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 3e0:	66 0f       	add	r22, r22
 3e2:	77 1f       	adc	r23, r23
 3e4:	88 1f       	adc	r24, r24
 3e6:	99 1f       	adc	r25, r25
 3e8:	1a f0       	brmi	.+6      	; 0x3f0 <__fixunssfsi+0x22>
 3ea:	ba 95       	dec	r27
 3ec:	c9 f7       	brne	.-14     	; 0x3e0 <__fixunssfsi+0x12>
 3ee:	12 c0       	rjmp	.+36     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 3f0:	b1 30       	cpi	r27, 0x01	; 1
 3f2:	81 f0       	breq	.+32     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 3f4:	96 d0       	rcall	.+300    	; 0x522 <__fp_zero>
 3f6:	b1 e0       	ldi	r27, 0x01	; 1
 3f8:	08 95       	ret
 3fa:	93 c0       	rjmp	.+294    	; 0x522 <__fp_zero>
 3fc:	67 2f       	mov	r22, r23
 3fe:	78 2f       	mov	r23, r24
 400:	88 27       	eor	r24, r24
 402:	b8 5f       	subi	r27, 0xF8	; 248
 404:	39 f0       	breq	.+14     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 406:	b9 3f       	cpi	r27, 0xF9	; 249
 408:	cc f3       	brlt	.-14     	; 0x3fc <__fixunssfsi+0x2e>
 40a:	86 95       	lsr	r24
 40c:	77 95       	ror	r23
 40e:	67 95       	ror	r22
 410:	b3 95       	inc	r27
 412:	d9 f7       	brne	.-10     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 414:	3e f4       	brtc	.+14     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 416:	90 95       	com	r25
 418:	80 95       	com	r24
 41a:	70 95       	com	r23
 41c:	61 95       	neg	r22
 41e:	7f 4f       	sbci	r23, 0xFF	; 255
 420:	8f 4f       	sbci	r24, 0xFF	; 255
 422:	9f 4f       	sbci	r25, 0xFF	; 255
 424:	08 95       	ret

00000426 <__floatunsisf>:
 426:	e8 94       	clt
 428:	09 c0       	rjmp	.+18     	; 0x43c <__floatsisf+0x12>

0000042a <__floatsisf>:
 42a:	97 fb       	bst	r25, 7
 42c:	3e f4       	brtc	.+14     	; 0x43c <__floatsisf+0x12>
 42e:	90 95       	com	r25
 430:	80 95       	com	r24
 432:	70 95       	com	r23
 434:	61 95       	neg	r22
 436:	7f 4f       	sbci	r23, 0xFF	; 255
 438:	8f 4f       	sbci	r24, 0xFF	; 255
 43a:	9f 4f       	sbci	r25, 0xFF	; 255
 43c:	99 23       	and	r25, r25
 43e:	a9 f0       	breq	.+42     	; 0x46a <__floatsisf+0x40>
 440:	f9 2f       	mov	r31, r25
 442:	96 e9       	ldi	r25, 0x96	; 150
 444:	bb 27       	eor	r27, r27
 446:	93 95       	inc	r25
 448:	f6 95       	lsr	r31
 44a:	87 95       	ror	r24
 44c:	77 95       	ror	r23
 44e:	67 95       	ror	r22
 450:	b7 95       	ror	r27
 452:	f1 11       	cpse	r31, r1
 454:	f8 cf       	rjmp	.-16     	; 0x446 <__floatsisf+0x1c>
 456:	fa f4       	brpl	.+62     	; 0x496 <__floatsisf+0x6c>
 458:	bb 0f       	add	r27, r27
 45a:	11 f4       	brne	.+4      	; 0x460 <__floatsisf+0x36>
 45c:	60 ff       	sbrs	r22, 0
 45e:	1b c0       	rjmp	.+54     	; 0x496 <__floatsisf+0x6c>
 460:	6f 5f       	subi	r22, 0xFF	; 255
 462:	7f 4f       	sbci	r23, 0xFF	; 255
 464:	8f 4f       	sbci	r24, 0xFF	; 255
 466:	9f 4f       	sbci	r25, 0xFF	; 255
 468:	16 c0       	rjmp	.+44     	; 0x496 <__floatsisf+0x6c>
 46a:	88 23       	and	r24, r24
 46c:	11 f0       	breq	.+4      	; 0x472 <__floatsisf+0x48>
 46e:	96 e9       	ldi	r25, 0x96	; 150
 470:	11 c0       	rjmp	.+34     	; 0x494 <__floatsisf+0x6a>
 472:	77 23       	and	r23, r23
 474:	21 f0       	breq	.+8      	; 0x47e <__floatsisf+0x54>
 476:	9e e8       	ldi	r25, 0x8E	; 142
 478:	87 2f       	mov	r24, r23
 47a:	76 2f       	mov	r23, r22
 47c:	05 c0       	rjmp	.+10     	; 0x488 <__floatsisf+0x5e>
 47e:	66 23       	and	r22, r22
 480:	71 f0       	breq	.+28     	; 0x49e <__floatsisf+0x74>
 482:	96 e8       	ldi	r25, 0x86	; 134
 484:	86 2f       	mov	r24, r22
 486:	70 e0       	ldi	r23, 0x00	; 0
 488:	60 e0       	ldi	r22, 0x00	; 0
 48a:	2a f0       	brmi	.+10     	; 0x496 <__floatsisf+0x6c>
 48c:	9a 95       	dec	r25
 48e:	66 0f       	add	r22, r22
 490:	77 1f       	adc	r23, r23
 492:	88 1f       	adc	r24, r24
 494:	da f7       	brpl	.-10     	; 0x48c <__floatsisf+0x62>
 496:	88 0f       	add	r24, r24
 498:	96 95       	lsr	r25
 49a:	87 95       	ror	r24
 49c:	97 f9       	bld	r25, 7
 49e:	08 95       	ret

000004a0 <fmin>:
 4a0:	99 0f       	add	r25, r25
 4a2:	bb 0b       	sbc	r27, r27
 4a4:	55 0f       	add	r21, r21
 4a6:	aa 0b       	sbc	r26, r26
 4a8:	e0 e8       	ldi	r30, 0x80	; 128
 4aa:	fe ef       	ldi	r31, 0xFE	; 254
 4ac:	16 16       	cp	r1, r22
 4ae:	17 06       	cpc	r1, r23
 4b0:	e8 07       	cpc	r30, r24
 4b2:	f9 07       	cpc	r31, r25
 4b4:	70 f0       	brcs	.+28     	; 0x4d2 <fmin+0x32>
 4b6:	12 16       	cp	r1, r18
 4b8:	13 06       	cpc	r1, r19
 4ba:	e4 07       	cpc	r30, r20
 4bc:	f5 07       	cpc	r31, r21
 4be:	60 f0       	brcs	.+24     	; 0x4d8 <fmin+0x38>
 4c0:	ba 17       	cp	r27, r26
 4c2:	54 f0       	brlt	.+20     	; 0x4d8 <fmin+0x38>
 4c4:	31 f4       	brne	.+12     	; 0x4d2 <fmin+0x32>
 4c6:	26 17       	cp	r18, r22
 4c8:	37 07       	cpc	r19, r23
 4ca:	48 07       	cpc	r20, r24
 4cc:	59 07       	cpc	r21, r25
 4ce:	a7 95       	ror	r26
 4d0:	1b f4       	brvc	.+6      	; 0x4d8 <fmin+0x38>
 4d2:	b9 01       	movw	r22, r18
 4d4:	ca 01       	movw	r24, r20
 4d6:	ba 2f       	mov	r27, r26
 4d8:	b6 95       	lsr	r27
 4da:	97 95       	ror	r25
 4dc:	08 95       	ret

000004de <__fp_split3>:
 4de:	57 fd       	sbrc	r21, 7
 4e0:	90 58       	subi	r25, 0x80	; 128
 4e2:	44 0f       	add	r20, r20
 4e4:	55 1f       	adc	r21, r21
 4e6:	59 f0       	breq	.+22     	; 0x4fe <__fp_splitA+0x10>
 4e8:	5f 3f       	cpi	r21, 0xFF	; 255
 4ea:	71 f0       	breq	.+28     	; 0x508 <__fp_splitA+0x1a>
 4ec:	47 95       	ror	r20

000004ee <__fp_splitA>:
 4ee:	88 0f       	add	r24, r24
 4f0:	97 fb       	bst	r25, 7
 4f2:	99 1f       	adc	r25, r25
 4f4:	61 f0       	breq	.+24     	; 0x50e <__fp_splitA+0x20>
 4f6:	9f 3f       	cpi	r25, 0xFF	; 255
 4f8:	79 f0       	breq	.+30     	; 0x518 <__fp_splitA+0x2a>
 4fa:	87 95       	ror	r24
 4fc:	08 95       	ret
 4fe:	12 16       	cp	r1, r18
 500:	13 06       	cpc	r1, r19
 502:	14 06       	cpc	r1, r20
 504:	55 1f       	adc	r21, r21
 506:	f2 cf       	rjmp	.-28     	; 0x4ec <__fp_split3+0xe>
 508:	46 95       	lsr	r20
 50a:	f1 df       	rcall	.-30     	; 0x4ee <__fp_splitA>
 50c:	08 c0       	rjmp	.+16     	; 0x51e <__fp_splitA+0x30>
 50e:	16 16       	cp	r1, r22
 510:	17 06       	cpc	r1, r23
 512:	18 06       	cpc	r1, r24
 514:	99 1f       	adc	r25, r25
 516:	f1 cf       	rjmp	.-30     	; 0x4fa <__fp_splitA+0xc>
 518:	86 95       	lsr	r24
 51a:	71 05       	cpc	r23, r1
 51c:	61 05       	cpc	r22, r1
 51e:	08 94       	sec
 520:	08 95       	ret

00000522 <__fp_zero>:
 522:	e8 94       	clt

00000524 <__fp_szero>:
 524:	bb 27       	eor	r27, r27
 526:	66 27       	eor	r22, r22
 528:	77 27       	eor	r23, r23
 52a:	cb 01       	movw	r24, r22
 52c:	97 f9       	bld	r25, 7
 52e:	08 95       	ret

00000530 <_exit>:
 530:	f8 94       	cli

00000532 <__stop_program>:
 532:	ff cf       	rjmp	.-2      	; 0x532 <__stop_program>
